"""
Python bindings for the `{{ extension.name }}` extension.

This module provides Python wrappers for OpenXR functions defined in the
`{{ extension.name }}` specification. These wrappers expose runtime diagnostics,
object naming, and other extension-specific features.

To enable this extension, include `"{{ extension.name }}"` in your
`enabled_extension_names` when calling :func:`xr.create_instance`.

See the Khronos registry for full specification:
{{ extension.spec_url }}
"""

from ctypes import byref, cast
from typing import Optional
import xr

EXTENSION_NAME = "{{ extension.name }}"
SPEC_VERSION = {{ extension.version }}
VENDOR_TAG = "{{ extension.vendor_tag }}"

{% for alias in extension.aliases %}
{{ alias.name }} = xr.{{ alias.target }}
{% endfor %}

{% block custom_helpers %}
# Custom helpers or callbacks may be inserted here.
{% endblock %}

{% for command in extension.commands %}
def {{ command.py_name }}({{ command.signature }}) -> None:
    """
    Wrapper for `{{ command.name }}`.

    :param {{ command.params | join(':\n    :param ') }}:
    :raises {{ command.raises | join(', ') }}:
    :see: {{ command.spec_url }}
    """
    pfn = cast(
        xr.get_instance_proc_addr(instance, "{{ command.name }}"),
        xr.PFN_{{ command.name }}
    )
    result = pfn({{ command.call_args }})
    checked = xr.check_result(xr.Result(result))
    if checked.is_exception():
        raise checked

{% endfor %}

__all__ = [
    {% for name in ((extension.aliases | map(attribute='name') | list + extension.functions | map(attribute='alias') | list | sort) %}
    "{{ name }}",
    {% endfor %}
    "EXTENSION_NAME",
    "SPEC_VERSION",
    "VENDOR_TAG",
    {% for alias in extension.aliases %}
    "{{ alias.name }}",
    {% endfor %}
    {% for command in extension.commands %}
    "{{ command.py_name }}",
    {% endfor %}
]
